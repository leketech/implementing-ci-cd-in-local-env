pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/leketech/implementing-ci-cd-in-local-env.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd demo-java-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://sonarqube:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd demo-java-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
    environment {
        DOCKER_IMAGE = "leke1995/demo-java-app:${build_version}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
    }
    steps {
        script {
            try {
                // Verify workspace
                sh 'pwd && ls -la'
                
                // Verify Docker installation
                sh 'docker version'
                
                // Build image
                dir('demo-java-app') {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
                
                // Login and push
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh """
                        echo "Logging in to DockerHub..."
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        echo "Pushing image ${DOCKER_IMAGE}..."
                        docker push ${DOCKER_IMAGE}
                    """
                }
            } catch (Exception e) {
                echo "Failed to build or push Docker image: ${e.getMessage()}"
                currentBuild.result = 'FAILURE'
                error("Pipeline failed: ${e.getMessage()}")
            }
        }
    }
}
